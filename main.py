import os
import time
import pyfiglet
import warnings
import joblib
from Extract.PE_main import extract_infos

# Suppress scikit-learn version warnings (optional)
warnings.filterwarnings("ignore", category=UserWarning, module='sklearn')

def predict_malware(features, model):
    # Use your loaded model to predict
    prediction = model.predict([list(features.values())]) 
    if prediction == 1:
        return "Malicious"
    else:
        return "Safe"

def run_PE():
    file = input("Enter the path and name of the file: ").strip()  # Strip whitespace
    features = extract_infos(file)
    if features:
        # Load the trained model
        clf = joblib.load('classifier.pkl')

        # Predict using the loaded model
        prediction = predict_malware(features, clf)
        print(f"The file {file} is predicted as: {prediction}")
    else:
        print(f"Could not extract features from {file}")


def run_URL():
    url = input("Input the URL that you want to check (e.g., google.com): ")
    
    if is_url_safe(url):
        print(f"\nThe URL '{url}' is safe.\n")
    else:
        print(f"\nThe URL '{url}' is potentially risky or malicious.\n")
    
    choice = input("Do you want to search again? (y/n): ").strip().lower()
    if choice == 'y':
        start()
    else:
        exit_program()


def exit_program():
    print("Exiting...")
    time.sleep(1)
    exit()

def start():
    print(pyfiglet.figlet_format("Malware Detector"))
    print("Welcome to antimalware detector\n")
    print("1. PE scanner")
    print("2. URL scanner")
    print("3. Exit\n")

    try:
        select = int(input("Enter your choice: "))
    except ValueError:
        print("Invalid input. Please enter a number between 1 and 3.\n")
        time.sleep(2)
        start()
        return

    if select in [1, 2, 3]:
        if select == 1:
            run_PE()
        elif select == 2:
            run_URL()
        else:
            exit_program()

        while True:
            choice = input("Do you want to search again? (y/n): ").strip().lower()
            if choice == 'y':
                start()
                return
            elif choice == 'n':
                exit_program()
            else:
                print("Invalid input. Please enter 'y' or 'n'.")
    else:
        print("Invalid choice. Please select 1, 2, or 3.")
        time.sleep(2)
        start()
def is_url_safe(url):
    safe_websites = [
        'wikipedia.org',
        'google.com',
        'geeksforgeeks.org',
        'leetcode.com',
        'facebook.com',
        'youtube.com',
    ]
    
    # Check if the URL is in the list of safe websites
    parsed_url = url.lower().strip()  # Normalize URL for case and whitespace
    for site in safe_websites:
        if site in parsed_url:
            return True
    
    return False

start()